name: Release Workflow

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: main

      - name: Set up Git User
        run: |
          git config --local user.name "${{ github.actor }}"
          git config --local user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME=${{ github.event.pull_request.head.ref }}
          VERSION=${BRANCH_NAME#release/}
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git tag -l "v${{ steps.extract_version.outputs.version }}")
          if [ ! -z "$TAG_EXISTS" ]; then
            echo "Tag v${{ steps.extract_version.outputs.version }} already exists, aborting release process."
            exit 1
          fi

      - name: Update package.json version and package-lock.json
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          CURRENT_PKG_VERSION=$(node -p "require('./package.json').version")

          if [ "$CURRENT_PKG_VERSION" == "$VERSION" ]; then
            echo "Version in package.json is already $VERSION. No change needed."
          else
            echo "Updating package.json version from $CURRENT_PKG_VERSION to $VERSION."
            npm version $VERSION --no-git-tag-version
          fi

          npm install --package-lock-only

      - name: Generate Changelog
        uses: saadmk11/changelog-ci@v1.1.2
        with:
          config_file: .github/changelog-ci-config.yml
          release_version: v${{ steps.extract_version.outputs.version }}
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Commit changes
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          git add package.json package-lock.json
          git commit -m "chore: bump version to $VERSION"

      - name: Create and push tag
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          git tag "v$VERSION"
          git push origin "v$VERSION"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Verify npm authentication
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_USERCONFIG: /home/runner/work/_temp/.npmrc

      - name: Install dependencies
        run: npm install

      - name: Build package
        run: npm run build

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_USERCONFIG: /home/runner/work/_temp/.npmrc

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: Release v${{ steps.extract_version.outputs.version }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Create backport branch
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          git checkout -b "backport/$VERSION"
          git push origin "backport/$VERSION"

      - name: Create backport PR
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          base: develop
          head: 'backport/${{ steps.extract_version.outputs.version }}'
          title: 'chore: backport version ${{ steps.extract_version.outputs.version }} to develop'
          body: |
            This PR backports the version bump from main to develop branch.

            Version: ${{ steps.extract_version.outputs.version }}
